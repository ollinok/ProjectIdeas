@page "/SampleData"
@inject IIdeaData ideaData;
@inject IStatusData statusData;
@inject IUserData userData;
@inject ICommentData commentData;

<h3>SampleData</h3>

@if (statusesCreated)
{
    <h4>Statuses have been created.</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>   
}

<button class="btn btn-danger" @onclick="GenerateSampleData">Generate Sample Data</button>

@code {
    private bool statusesCreated = false;

    private async Task GenerateSampleData()
    {
        UserModel user = new()
            {
                UserName = "testiukko",
                EmailAddress = "testi@test.com",
                ObjectIdentifier = "abc-123"
            };
        await userData.CreateUser(user);

        var foundUser = await userData.GetUserFromAuthentication("abc-123");
        var statuses = await statusData.GetAllStatuses();

        HashSet<string> stars = new();
        stars.Add("1");
        stars.Add("2");
        stars.Add("3");

        IdeaModel idea = new()
            {
                Owner = new BasicUserModel(foundUser),
                Title = "Testi-idea",
                DescShort = "Tämä on testi-idea.",
                DescLong = "Tähän tulee pidempi kuvaus...",
                Status = statuses[0]
            };
        await ideaData.CreateIdea(idea);

        idea = new()
            {
                Owner = new BasicUserModel(foundUser),
                Title = "Testi-idea 2",
                DescShort = "Tämä on toinen testi-idea.",
                DescLong = "Tähän tulee pidempi kuvaus... lelelelelleelelele lolololololol",
                Status = statuses[1],
                Stars = stars
            };
        await ideaData.CreateIdea(idea);

        stars.Add("4");

        idea = new()
            {
                Owner = new BasicUserModel(foundUser),
                Title = "Testi-idea 3",
                DescShort = "Tämä on kolmas testi-idea.",
                DescLong = "Tähän tulee pidempi kuvaus... lelelelelleelelele lolololololol",
                Status = statuses[2],
                Stars = stars
            };
        await ideaData.CreateIdea(idea);
    }

    //private async Task CreateIdeaListView()
    //{
    //    var ideas = await ideaData.GetAllActiveIdeas();

    //    if (ideas?.Count > 0)
    //    {
    //        return;
    //    }

    //}

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatuses();

        if (statuses?.Count > 0)
        {
            return;
        }

        StatusModel stat = new()
            {
                Name = "Completed",
                Description = "A fully realized and built idea."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                Name = "In development",
                Description = "The development process has started."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                Name = "Concept",
                Description = "The basic concept has been established."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                Name = "Abandoned",
                Description = "The idea is marked as abandoned."
            };
        await statusData.CreateStatus(stat);

        statusesCreated = true;
    }
}
